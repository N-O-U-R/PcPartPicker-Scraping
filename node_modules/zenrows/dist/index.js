"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZenRows = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const axios_1 = require("axios");
const axios_retry_1 = require("axios-retry");
const fastq = require("fastq");
const version_1 = require("./version");
const API_URL = 'https://api.zenrows.com/v1/';
class ZenRows {
    constructor(apiKey, clientConfig = {}) {
        var _a;
        this.apiKey = apiKey;
        this.clientConfig = clientConfig;
        this.queue = fastq.promise(this, this.worker, (_a = this.clientConfig.concurrency) !== null && _a !== void 0 ? _a : 5);
        this.applyRetries();
    }
    get(url, config, { headers = {} } = {}) {
        return this.queue.push({ url, config, headers });
    }
    post(url, config, { headers = {}, data = {} } = {}) {
        return this.queue.push({ url, method: 'POST', config, headers, data });
    }
    worker({ url, method = 'GET', config, headers, data }) {
        const params = Object.assign(Object.assign({}, config), { url, apikey: this.apiKey });
        const finalHeaders = Object.assign({ 'User-Agent': `zenrows/${version_1.VERSION} node` }, headers);
        const axiosRequestConfig = {
            baseURL: API_URL,
            method,
            params,
            headers: finalHeaders,
            data,
        };
        if (headers && Object.keys(headers).length) {
            params.custom_headers = true;
        }
        return (0, axios_1.default)(axiosRequestConfig);
    }
    applyRetries() {
        var _a;
        const retries = (_a = this.clientConfig.retries) !== null && _a !== void 0 ? _a : 0;
        if (retries > 0) {
            (0, axios_retry_1.default)(axios_1.default, {
                retries,
                retryDelay: axios_retry_1.default.exponentialDelay,
                retryCondition: (error) => {
                    var _a;
                    if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 429) {
                        return true;
                    }
                    return axios_retry_1.default.isNetworkOrIdempotentRequestError(error);
                },
            });
        }
    }
}
exports.ZenRows = ZenRows;
