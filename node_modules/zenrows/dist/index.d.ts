import { AxiosPromise, Method } from 'axios';
import * as fastq from 'fastq';
interface ClientConfig {
    concurrency?: number;
    retries?: number;
}
interface Config {
    autoparse?: boolean;
    css_extractor?: string;
    js_render?: boolean;
    premium_proxy?: boolean;
    proxy_country?: string;
    wait_for?: string;
    wait?: number;
    block_resources?: string;
    window_width?: number;
    window_height?: number;
    device?: string;
    original_status?: boolean;
    custom_headers?: boolean;
    [x: string]: unknown;
}
interface Headers {
    [x: string]: string;
}
declare class ZenRows {
    readonly apiKey: string;
    readonly clientConfig: ClientConfig;
    readonly queue: fastq.queueAsPromised<{
        url: string;
        method?: Method | undefined;
        config?: Config | undefined;
        headers: Headers;
        data?: any;
    }, import("axios").AxiosResponse<any>>;
    constructor(apiKey: string, clientConfig?: ClientConfig);
    get(url: string, config?: Config, { headers }?: {
        headers?: Headers;
    }): AxiosPromise;
    post(url: string, config?: Config, { headers, data }?: {
        headers?: Headers;
        data?: any;
    }): AxiosPromise;
    private worker;
    private applyRetries;
}
export { ZenRows };
